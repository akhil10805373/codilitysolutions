CountDiv

Write a function:

class Solution { public int solution(int A, int B, int K); }

that, given three integers A, B and K, returns the number of integers within the range [A..B] that are divisible by K, i.e.:

{ i : A ≤ i ≤ B, i mod K = 0 }

For example, for A = 6, B = 11 and K = 2, your function should return 3, because there are three numbers divisible by 2 within the range [6..11], namely 6, 8 and 10.

Write an efficient algorithm for the following assumptions:

A and B are integers within the range [0..2,000,000,000];
K is an integer within the range [1..2,000,000,000];
A ≤ B.

Solution:

using System;
// you can also use other imports, for example:
// using System.Collections.Generic;

// you can write to stdout for debugging purposes, e.g.
// Console.WriteLine("this is a debug message");

class Solution {
    public int solution(int A, int B, int K) {
       var count = 0;
       if(A == B)
       {
           if(B%K==0)
           {
               return 1;
           }
       }
       if(K==1)
       {
           if(A==1)
           {
               return B;
           }
           if(A == 0)
           {
               return B + 1;
           }
           return (B-A)/K;
       }
       var number = A;
       while(number % K !=0)
       {
           number++;
       }
       while(number <= B){
           if(number%K == 0)
           {
               count++;
           }
           number += K;
       }
       
       return count;
    }
}

Test
[100, 123456789, 2]
[0,2000000000,1]
[2000000000,2000000000,1]
[0,2000000000,2]
[3,2000000000,1]
[5,5,5]
[1,1,1]
[0,1,1]
[0,0,11]
[0, 14, 2]